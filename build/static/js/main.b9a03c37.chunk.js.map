{"version":3,"sources":["components/Container.jsx","components/Navbar.jsx","components/Footer.jsx","components/Hero.jsx","App.js","serviceWorker.js","index.js"],"names":["Container","_ref","children","react_default","a","createElement","className","Navbar","href","Footer","Hero","App","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"4LAEeA,EAAA,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,SAAH,OAAkBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAaJ,ICA9CK,EAAA,kBACbJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,KAAGG,KAAK,IAAIF,UAAU,gBAAtB,4BACAH,EAAAC,EAAAC,cAAA,KAAGG,KAAK,QAAQF,UAAU,gBAA1B,UCHWG,EAAA,kBACbN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,KAAGG,KAAK,kCAAkCF,UAAU,gBAApD,UACAH,EAAAC,EAAAC,cAAA,KAAGG,KAAK,uCAAuCF,UAAU,gBAAzD,YACAH,EAAAC,EAAAC,cAAA,KAAGG,KAAK,sCAAsCF,UAAU,gBAAxD,WACAH,EAAAC,EAAAC,cAAA,KAAGG,KAAK,gCAAgCF,UAAU,gBAAlD,UCLWI,EAAA,kBACbP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cAAb,yIACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cAAb,iRACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cAAb,gdACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cAAb,8YACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cAAb,6HCWWK,0LAVX,OACER,EAAAC,EAAAC,cAACL,EAAD,KACEG,EAAAC,EAAAC,cAACE,EAAD,MACAJ,EAAAC,EAAAC,cAACK,EAAD,MACAP,EAAAC,EAAAC,cAACI,EAAD,cANUG,cCKZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,gHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,UAO5BW,MAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,KC3FjEC,IAASC,OAAOrC,EAAAC,EAAAC,cAACoC,EAAD,MAASC,SAASC,eAAe,SDiB1C,SAAkBtB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIsB,IAAIC,GAAwB9B,OAAOC,SAASR,MACpDsC,SAAW/B,OAAOC,SAAS8B,OAIvC,OAGF/B,OAAOgC,iBAAiB,OAAQ,WAC9B,IAAM3B,EAAK,GAAA4B,OAAMH,GAAN,sBAEPhC,GAgEV,SAAiCO,EAAOC,GAEtC4B,MAAM7B,GACHK,KAAK,SAAAyB,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5CjC,UAAUC,cAAciC,MAAM/B,KAAK,SAAAC,GACjCA,EAAa+B,aAAahC,KAAK,WAC7BV,OAAOC,SAAS0C,aAKpBvC,EAAgBC,EAAOC,KAG1BgB,MAAM,WACLJ,QAAQC,IACN,mEArFAyB,CAAwBvC,EAAOC,GAI/BC,UAAUC,cAAciC,MAAM/B,KAAK,WACjCQ,QAAQC,IACN,+GAMJf,EAAgBC,EAAOC,MC3C/BE","file":"static/js/main.b9a03c37.chunk.js","sourcesContent":["import React from 'react';\n\nexport default ({ children }) => <div className=\"container\">{children}</div>;\n","import React from 'react';\n\nexport default () => (\n  <div className=\"navbar\">\n    <a href=\"/\" className=\"navbar--logo\">Ratnasambhav Priyadarshi</a>\n    <a href=\"/blog\" className=\"navbar--link\">Blog</a>\n  </div>\n);\n","import React from 'react';\n\nexport default () => (\n  <div className=\"footer\">\n    <a href=\"https://github.com/Ratnasambhav\" className=\"footer--link\">Github</a>\n    <a href=\"https://linkedin.com/in/Ratnasambhav\" className=\"footer--link\">LinkedIn</a>\n    <a href=\"https://twitter.com/ratnasambhav732\" className=\"footer--link\">Twitter</a>\n    <a href=\"mailto:ratnasambhav@gmail.com\" className=\"footer--link\">Mail</a>\n  </div>\n);\n","import React from 'react';\n\nexport default () => (\n  <div className=\"hero\">\n    <p className=\"hero--text\">I&apos;m studying Computer Science at VIT Vellore but I&apos;m from Jamshedpur. Right now, I&apos;m also working as an intern at Amazon in Banglore.</p>\n    <p className=\"hero--text\">I love to code, especially web development. I really like learning new programming languages, comparing them with the languages I already know and seen how they work and why they were created in the first place. JavaScript, Python and Elixer are my favourite languages.</p>\n    <p className=\"hero--text\">Apart from geeking out about computers, I also love gaming and reading books. I play almost all kinds of games, expect FPS and RTS. When it comes to books, I mostly read fantsy novels but I try to read some non-fiction once in a while. I also like graphics design and UI design. I can spend hours browsing Dribbble and Tumblr. Unfortunately, grahics desing is hard and (as you can probably tell) I&apos;m not very good at it. And like any sane person, I love music.</p>\n    <p className=\"hero--text\">I made this website to serve as a blog. Though I haven&apos;t started writing any blog posts yet, I plan to write about things I learn about programing, the books I read and the games I play. That being said, I don&apos;t want to limit myself to only these topics. Also, I&apos;m still learning and I&apos;m not an expert in any of the above mentioned topics, so take everything you read here with a grain of salt.</p>\n    <p className=\"hero--text\">Finally, I don&apos;t know how you got here but I&apos;m glad you came. Thank you for visiting! Your feedback is always welcomed.</p>\n  </div>\n)","import React, { Component } from 'react';\nimport Container from './components/Container';\nimport Navbar from './components/Navbar';\nimport Footer from './components/Footer';\nimport Hero from './components/Hero';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Container>\n        <Navbar />\n        <Hero />\n        <Footer />\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}